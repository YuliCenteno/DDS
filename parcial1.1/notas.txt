Lo que vamos a hacer es un cliente (frontend) que simplemente se encarga de enviarle datos al backend a traves de formularios
Los formularios son metodos de entrada de datos de un sistema de informacion cualquiera.

Dichos datos se envian mediante un JSON, es la forma de comunicarse entre distintos sistemas. Es la via de acceso que me permite
compartir datos.

https://developer.mozilla.org/es/docs/Web/HTML

JSON son objetos clave-valor 

Una API es nuestro puente entre el front y el back, es lo que los comunica, el front le hace una peticion a la API,
la API le pregunta al back que hacer, el back hace su logica de negocio preguntandole a la base que hacer, la base 
de datos le devuelve algo y el back se los devuelve al front lo que necesite. Ese es el flujo general de todo.

Los controladores es donde vamos construyendo dentro de nuestra API los distintos endpoints, o URLS.

DB browser nos sirve como interfaz grafica para nuestro motor de base de datos.
Sequelize es un framework ORM, es una herramienta que nos permite vincular ese modelo que creamos conectandolo con la base de datos.
Express nos permite construir la API, porque con nodejs no podemos construirla, necesitamos un framework como Express.

Express fue el primero en crearse y es el rey. Podemos usar otros framework pero todos funcionan bajo Express.

Luego de instalar y crear todas las capetas tengo que instalar todas las dependencias:
    npm i express sequelize sqlite3 cors

El node modules y el package-lock.json no se suben a git, se ponen dentro de un archivo llamado .gitignore

cors permite vincular el back con el front, el cors nos permite que las peticiones se hagan solo de un front especifico,
para que no se hagan las peticiones directamente al servidor.

1er paso: construir api en app.js


DOM
Al inicio, nosotros hacíamos en nuestro frontend, solamente HTML, CSS, y bootstrap.
Siendo realistas, lo máximo que podemos lograr con eso, es hacer una página estática, que simplemente muestre alguna información al usuario de forma hardcodeada (puesta toda a propósito, sin consultas a base de datos ni nada de eso).

Entonces, ¿cómo puedo hacer yo para que el usuario pueda interactuar con mi página más allá de un simple scroll o un simple click? ¿Cómo puedo hacer para que muestre cosas de una base de datos? ¿O que se ejecute una animación piola si pasa algo? A través del DOM.

Las siglas DOM significan Document Object Model, o lo que es lo mismo, la estructura del documento HTML. Una página HTML está formada por múltiples etiquetas HTML, anidadas una dentro de otra, formando un árbol de etiquetas relacionadas entre sí, que se denomina árbol DOM (o simplemente DOM).